/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollectionsService } from "../collections.service";
import { CollectionsCreateInput } from "./CollectionsCreateInput";
import { Collections } from "./Collections";
import { CollectionsFindManyArgs } from "./CollectionsFindManyArgs";
import { CollectionsWhereUniqueInput } from "./CollectionsWhereUniqueInput";
import { CollectionsUpdateInput } from "./CollectionsUpdateInput";
import { ArticlesFindManyArgs } from "../../articles/base/ArticlesFindManyArgs";
import { Articles } from "../../articles/base/Articles";
import { ArticlesWhereUniqueInput } from "../../articles/base/ArticlesWhereUniqueInput";

export class CollectionsControllerBase {
  constructor(protected readonly service: CollectionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collections })
  async createCollections(
    @common.Body() data: CollectionsCreateInput
  ): Promise<Collections> {
    return await this.service.createCollections({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collections] })
  @ApiNestedQuery(CollectionsFindManyArgs)
  async collectionsItems(
    @common.Req() request: Request
  ): Promise<Collections[]> {
    const args = plainToClass(CollectionsFindManyArgs, request.query);
    return this.service.collectionsItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collections })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collections(
    @common.Param() params: CollectionsWhereUniqueInput
  ): Promise<Collections | null> {
    const result = await this.service.collections({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collections })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollections(
    @common.Param() params: CollectionsWhereUniqueInput,
    @common.Body() data: CollectionsUpdateInput
  ): Promise<Collections | null> {
    try {
      return await this.service.updateCollections({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collections })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollections(
    @common.Param() params: CollectionsWhereUniqueInput
  ): Promise<Collections | null> {
    try {
      return await this.service.deleteCollections({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/articlesItems")
  @ApiNestedQuery(ArticlesFindManyArgs)
  async findArticlesItems(
    @common.Req() request: Request,
    @common.Param() params: CollectionsWhereUniqueInput
  ): Promise<Articles[]> {
    const query = plainToClass(ArticlesFindManyArgs, request.query);
    const results = await this.service.findArticlesItems(params.id, {
      ...query,
      select: {
        collection: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/articlesItems")
  async connectArticlesItems(
    @common.Param() params: CollectionsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        connect: body,
      },
    };
    await this.service.updateCollections({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/articlesItems")
  async updateArticlesItems(
    @common.Param() params: CollectionsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        set: body,
      },
    };
    await this.service.updateCollections({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/articlesItems")
  async disconnectArticlesItems(
    @common.Param() params: CollectionsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        disconnect: body,
      },
    };
    await this.service.updateCollections({
      where: params,
      data,
      select: { id: true },
    });
  }
}
