/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Collections as PrismaCollections,
  Articles as PrismaArticles,
} from "@prisma/client";

export class CollectionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollectionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collections.count(args);
  }

  async collectionsItems<T extends Prisma.CollectionsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionsFindManyArgs>
  ): Promise<PrismaCollections[]> {
    return this.prisma.collections.findMany<Prisma.CollectionsFindManyArgs>(
      args
    );
  }
  async collections<T extends Prisma.CollectionsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionsFindUniqueArgs>
  ): Promise<PrismaCollections | null> {
    return this.prisma.collections.findUnique(args);
  }
  async createCollections<T extends Prisma.CollectionsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionsCreateArgs>
  ): Promise<PrismaCollections> {
    return this.prisma.collections.create<T>(args);
  }
  async updateCollections<T extends Prisma.CollectionsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionsUpdateArgs>
  ): Promise<PrismaCollections> {
    return this.prisma.collections.update<T>(args);
  }
  async deleteCollections<T extends Prisma.CollectionsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionsDeleteArgs>
  ): Promise<PrismaCollections> {
    return this.prisma.collections.delete(args);
  }

  async findArticlesItems(
    parentId: string,
    args: Prisma.ArticlesFindManyArgs
  ): Promise<PrismaArticles[]> {
    return this.prisma.collections
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .articlesItems(args);
  }
}
