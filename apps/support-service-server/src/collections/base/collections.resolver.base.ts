/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Collections } from "./Collections";
import { CollectionsCountArgs } from "./CollectionsCountArgs";
import { CollectionsFindManyArgs } from "./CollectionsFindManyArgs";
import { CollectionsFindUniqueArgs } from "./CollectionsFindUniqueArgs";
import { CreateCollectionsArgs } from "./CreateCollectionsArgs";
import { UpdateCollectionsArgs } from "./UpdateCollectionsArgs";
import { DeleteCollectionsArgs } from "./DeleteCollectionsArgs";
import { ArticlesFindManyArgs } from "../../articles/base/ArticlesFindManyArgs";
import { Articles } from "../../articles/base/Articles";
import { CollectionsService } from "../collections.service";
@graphql.Resolver(() => Collections)
export class CollectionsResolverBase {
  constructor(protected readonly service: CollectionsService) {}

  async _collectionsItemsMeta(
    @graphql.Args() args: CollectionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Collections])
  async collectionsItems(
    @graphql.Args() args: CollectionsFindManyArgs
  ): Promise<Collections[]> {
    return this.service.collectionsItems(args);
  }

  @graphql.Query(() => Collections, { nullable: true })
  async collections(
    @graphql.Args() args: CollectionsFindUniqueArgs
  ): Promise<Collections | null> {
    const result = await this.service.collections(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Collections)
  async createCollections(
    @graphql.Args() args: CreateCollectionsArgs
  ): Promise<Collections> {
    return await this.service.createCollections({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Collections)
  async updateCollections(
    @graphql.Args() args: UpdateCollectionsArgs
  ): Promise<Collections | null> {
    try {
      return await this.service.updateCollections({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Collections)
  async deleteCollections(
    @graphql.Args() args: DeleteCollectionsArgs
  ): Promise<Collections | null> {
    try {
      return await this.service.deleteCollections(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Articles], { name: "articlesItems" })
  async findArticlesItems(
    @graphql.Parent() parent: Collections,
    @graphql.Args() args: ArticlesFindManyArgs
  ): Promise<Articles[]> {
    const results = await this.service.findArticlesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
