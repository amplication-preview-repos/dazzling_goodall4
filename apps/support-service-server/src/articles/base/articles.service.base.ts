/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Articles as PrismaArticles,
  Collections as PrismaCollections,
} from "@prisma/client";

export class ArticlesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArticlesCountArgs, "select">): Promise<number> {
    return this.prisma.articles.count(args);
  }

  async articlesItems<T extends Prisma.ArticlesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticlesFindManyArgs>
  ): Promise<PrismaArticles[]> {
    return this.prisma.articles.findMany<Prisma.ArticlesFindManyArgs>(args);
  }
  async articles<T extends Prisma.ArticlesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticlesFindUniqueArgs>
  ): Promise<PrismaArticles | null> {
    return this.prisma.articles.findUnique(args);
  }
  async createArticles<T extends Prisma.ArticlesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticlesCreateArgs>
  ): Promise<PrismaArticles> {
    return this.prisma.articles.create<T>(args);
  }
  async updateArticles<T extends Prisma.ArticlesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticlesUpdateArgs>
  ): Promise<PrismaArticles> {
    return this.prisma.articles.update<T>(args);
  }
  async deleteArticles<T extends Prisma.ArticlesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticlesDeleteArgs>
  ): Promise<PrismaArticles> {
    return this.prisma.articles.delete(args);
  }

  async getCollection(parentId: string): Promise<PrismaCollections | null> {
    return this.prisma.articles
      .findUnique({
        where: { id: parentId },
      })
      .collection();
  }
}
