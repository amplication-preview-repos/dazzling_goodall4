/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Tickets as PrismaTickets } from "@prisma/client";

export class TicketsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TicketsCountArgs, "select">): Promise<number> {
    return this.prisma.tickets.count(args);
  }

  async ticketsItems<T extends Prisma.TicketsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketsFindManyArgs>
  ): Promise<PrismaTickets[]> {
    return this.prisma.tickets.findMany<Prisma.TicketsFindManyArgs>(args);
  }
  async tickets<T extends Prisma.TicketsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketsFindUniqueArgs>
  ): Promise<PrismaTickets | null> {
    return this.prisma.tickets.findUnique(args);
  }
  async createTickets<T extends Prisma.TicketsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketsCreateArgs>
  ): Promise<PrismaTickets> {
    return this.prisma.tickets.create<T>(args);
  }
  async updateTickets<T extends Prisma.TicketsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketsUpdateArgs>
  ): Promise<PrismaTickets> {
    return this.prisma.tickets.update<T>(args);
  }
  async deleteTickets<T extends Prisma.TicketsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TicketsDeleteArgs>
  ): Promise<PrismaTickets> {
    return this.prisma.tickets.delete(args);
  }
}
